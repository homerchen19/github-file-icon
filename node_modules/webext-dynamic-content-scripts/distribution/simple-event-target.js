/**
 * Thinnest possible wrapper around native events
 *
 * @usage
 *   const smokeSignals = new SimpleEventTarget();
 *   smokeSignals.add(details => console.log(details))
 *   smokeSignals.emit('The BBQ is ready');
 */
export class SimpleEventTarget extends EventTarget {
    coreEvent = 'DEFAULT';
    weakEvents = new WeakMap();
    add(callback) {
        this.addEventListener(this.coreEvent, this.getNativeListener(callback));
    }
    remove(callback) {
        this.removeEventListener(this.coreEvent, this.getNativeListener(callback));
    }
    emit(detail) {
        this.dispatchEvent(new CustomEvent(this.coreEvent, { detail }));
    }
    // Permanently map simplified callbacks to native listeners.
    // This acts as a memoization/deduplication which matches the native behavior.
    // Calling `add(cb); add(cb); remove(cb)` should only add it once and remove it once.
    getNativeListener(callback) {
        if (this.weakEvents.has(callback)) {
            return this.weakEvents.get(callback);
        }
        const native = ((event) => {
            callback(event.detail);
        });
        this.weakEvents.set(callback, native);
        return native;
    }
}
