import chromeP from 'webext-polyfill-kinda';
import { executeFunction } from 'webext-content-scripts';
import { isChrome } from 'webext-detect';
export function castTarget(target) {
    return typeof target === 'object'
        ? target
        : {
            tabId: target,
            frameId: 0,
        };
}
export async function getTabUrl(target) {
    const { frameId, tabId } = castTarget(target);
    try {
        if (frameId === 0 && 'tabs' in globalThis.chrome) {
            const tab = await chromeP.tabs.get(tabId);
            if (tab.url) {
                return tab.url;
            }
        }
        return await executeFunction(target, () => location.href);
    }
    catch {
        // No host permissions
        return undefined;
    }
}
/** Utility to await promises where you only care whether they throw or not */
async function isPromiseFulfilled(promise) {
    try {
        await promise;
        return true;
    }
    catch {
        return false;
    }
}
export async function doesTabExist(tabId) {
    return isPromiseFulfilled(chromeP.tabs.get(tabId));
}
export function setActionPopup(getPopupUrl) {
    const browserAction = chrome.action ?? chromeP.browserAction;
    const setOnActiveTab = async (windowId) => {
        const [tab] = await chromeP.tabs.query({
            active: true,
            ...windowId ? { windowId } : { lastFocusedWindow: true },
        });
        if (!tab) {
            return;
        }
        await browserAction.setPopup({
            popup: await getPopupUrl(tab.url) ?? '',
            tabId: tab.id,
        });
    };
    void setOnActiveTab();
    chrome.windows.onFocusChanged.addListener(setOnActiveTab);
    chrome.tabs.onActivated.addListener(async (activeInfo) => {
        const tab = await chromeP.tabs.get(activeInfo.tabId);
        await browserAction.setPopup({
            popup: await getPopupUrl(tab.url) ?? '',
            tabId: tab.id,
        });
    });
    chrome.tabs.onUpdated.addListener(async (tabId, changeInfo, tab) => {
        if (tab.active && changeInfo.url) {
            await browserAction.setPopup({
                popup: await getPopupUrl(tab.url) ?? '',
                tabId,
            });
        }
    });
}
const optionsShortcut = 'WEBEXT_TOOLS_OPTIONS';
function onContextMenuClick({ menuItemId }) {
    if (menuItemId === optionsShortcut) {
        void chrome.runtime.openOptionsPage();
    }
}
export function addOptionsContextMenu() {
    if (isChrome()) {
        return;
    }
    if (!(chrome.action ?? chrome.browserAction)) {
        console.warn('Add `action` or `browser_action` to your manifest to enable `addOptionsContextMenu`.');
        return;
    }
    if (!chrome.contextMenus) {
        // Silently ignore if the API is not available, like in Firefox Android
        // https://github.com/fregante/webext-permission-toggle/pull/53
        return;
    }
    chrome.contextMenus.onClicked.addListener(onContextMenuClick);
    chrome.contextMenus.create({
        id: optionsShortcut,
        title: 'Optionsâ€¦',
        contexts: 'action' in chrome ? ['action'] : ['browser_action'],
    });
}
